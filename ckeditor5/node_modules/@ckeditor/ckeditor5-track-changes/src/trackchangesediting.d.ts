/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/**
 * @module track-changes/trackchangesediting
 * @publicApi
 */
import { Plugin, PendingActions, type Editor } from 'ckeditor5/src/core';
import { type Element, type Range } from 'ckeditor5/src/engine';
import { Users } from 'ckeditor5-collaboration/src/collaboration-core';
import TrackChangesCommand from './commands/trackchangescommand';
import Suggestion, { type SuggestionJSON } from './suggestion';
import TrackChangesAlignment from './integrations/alignment';
import TrackChangesBasicStyles from './integrations/basicstyles';
import TrackChangesBlockQuote from './integrations/blockquote';
import TrackChangesCKBox from './integrations/ckbox';
import TrackChangesCodeBlock from './integrations/codeblock';
import TrackChangesComments from './integrations/comments';
import TrackChangesDeleteCommand from './integrations/deletecommand';
import TrackChangesDocumentList from './integrations/documentlist';
import TrackChangesEnterCommand from './integrations/entercommand';
import TrackChangesFindAndReplace from './integrations/findandreplace';
import TrackChangesFont from './integrations/font';
import TrackChangesFormatPainter from './integrations/formatpainter';
import TrackChangesHeading from './integrations/heading';
import TrackChangesHighlight from './integrations/highlight';
import TrackChangesHorizontalLine from './integrations/horizontalline';
import TrackChangesHtmlEmbed from './integrations/htmlembed';
import TrackChangesImage from './integrations/image';
import TrackChangesImageReplace from './integrations/imagereplace';
import TrackChangesImportWord from './integrations/importword';
import TrackChangesIndent from './integrations/indent';
import TrackChangesInputCommand from './integrations/inputcommand';
import TrackChangesLink from './integrations/link';
import TrackChangesList from './integrations/list';
import TrackChangesListProperties from './integrations/listproperties';
import TrackChangesMediaEmbed from './integrations/mediaembed';
import TrackChangesMention from './integrations/mention';
import TrackChangesPageBreak from './integrations/pagebreak';
import TrackChangesParagraph from './integrations/paragraph';
import TrackChangesRemoveFormat from './integrations/removeformat';
import TrackChangesRestrictedEditingMode from './integrations/restrictededitingmode';
import TrackChangesShiftEnterCommand from './integrations/shiftentercommand';
import TrackChangesStandardEditingMode from './integrations/standardeditingmode';
import TrackChangesStylesDropdown from './integrations/style';
import TrackChangesTable from './integrations/table';
import TrackChangesTableMergeSplit from './integrations/tablemergesplit';
import TrackChangesTableHeadings from './integrations/tableheadings';
import TrackChangesTableClipboard from './integrations/tableclipboard';
import TrackChangesTableColumnResize from './integrations/tablecolumnresize';
import TrackChangesTemplate from './integrations/template';
import TrackChangesTableOfContents from './integrations/tableofcontents';
import TrackChangesTitle from './integrations/title';
import TrackChangesUndo from './integrations/undo';
import TrackChangesTableCaption from './integrations/tablecaption';
import TrackChangesDocumentListProperties from './integrations/documentlistproperties';
import TrackChangesTableProperties from './integrations/tableproperties';
import type { SuggestionData, TrackChangesAdapter } from './trackchanges';
/**
 * Provides editing part of the {@link module:track-changes/trackchanges~TrackChanges track changes plugin}.
 */
export default class TrackChangesEditing extends Plugin {
    /**
     * List of names of active (highlighted) markers.
     *
     * @observable
     */
    activeMarkers: Array<string>;
    /**
     * Reference to command that turns the track changes mode on and off.
     */
    trackChangesCommand: TrackChangesCommand;
    static get requires(): readonly ["CommentsRepository", typeof Users, typeof PendingActions, typeof TrackChangesAlignment, typeof TrackChangesBasicStyles, typeof TrackChangesBlockQuote, typeof TrackChangesCKBox, typeof TrackChangesCodeBlock, typeof TrackChangesComments, typeof TrackChangesDeleteCommand, typeof TrackChangesDocumentList, typeof TrackChangesDocumentListProperties, typeof TrackChangesEnterCommand, typeof TrackChangesFindAndReplace, typeof TrackChangesFont, typeof TrackChangesFormatPainter, typeof TrackChangesHeading, typeof TrackChangesHighlight, typeof TrackChangesHorizontalLine, typeof TrackChangesHtmlEmbed, typeof TrackChangesImage, typeof TrackChangesImageReplace, typeof TrackChangesImportWord, typeof TrackChangesIndent, typeof TrackChangesInputCommand, typeof TrackChangesLink, typeof TrackChangesList, typeof TrackChangesListProperties, typeof TrackChangesMediaEmbed, typeof TrackChangesMention, typeof TrackChangesPageBreak, typeof TrackChangesParagraph, typeof TrackChangesRemoveFormat, typeof TrackChangesRestrictedEditingMode, typeof TrackChangesShiftEnterCommand, typeof TrackChangesStandardEditingMode, typeof TrackChangesStylesDropdown, typeof TrackChangesTable, typeof TrackChangesTableMergeSplit, typeof TrackChangesTableHeadings, typeof TrackChangesTableCaption, typeof TrackChangesTableClipboard, typeof TrackChangesTableColumnResize, typeof TrackChangesTableOfContents, typeof TrackChangesTableProperties, typeof TrackChangesTemplate, typeof TrackChangesTitle, typeof TrackChangesUndo];
    static get pluginName(): "TrackChangesEditing";
    /**
     * @inheritDoc
     */
    constructor(editor: Editor);
    /**
     * @inheritDoc
     */
    init(): void;
    /**
     * An adapter object that should communicate with the data source to fetch or save the suggestion data.
     */
    set adapter(adapter: TrackChangesAdapter | null);
    get adapter(): TrackChangesAdapter | null;
    getSuggestions(options?: {
        skipNotAttached?: boolean;
        toJSON?: false;
    }): Array<Suggestion>;
    getSuggestions(options: {
        skipNotAttached?: boolean;
        toJSON: true;
    }): Array<SuggestionJSON>;
    getSuggestions(options: {
        skipNotAttached?: boolean;
        toJSON: boolean;
    }): Array<Suggestion> | Array<SuggestionJSON>;
    /**
     * Returns {@link module:track-changes/suggestion~Suggestion suggestion} for given `id`.
     */
    getSuggestion(id: string): Suggestion;
    /**
     * Checks if {@link module:track-changes/suggestion~Suggestion suggestion} of given `id` exist.
     */
    hasSuggestion(id: string): boolean;
    /**
     * Adds suggestion data.
     */
    addSuggestionData(data: SuggestionData): Suggestion;
    /**
     * Accept all adjacent suggestions.
     */
    acceptSuggestion(suggestion: Suggestion): void;
    /**
     * Discard all adjacent suggestions.
     */
    discardSuggestion(suggestion: Suggestion): void;
    /**
     * Enables command with given `commandName` in track changes mode.
     *
     * When a command gets enabled in track changes mode, its original `execute()` method is overwritten by provided `callback()`
     * function. The `callback()` should provide alternative logic to be executed instead.
     *
     * The `callback()` function is passed one or more parameters:
     *
     * * the first parameter is `executeCommand()`, a function that upon calling will fire the original `execute()` method,
     * * then, all the parameters passed to original `execute()` call are passed.
     *
     * Using those parameters it is possible to call the original command in the `callback()` (or skip it) and also do
     * something before and/or after that call.
     *
     * If `callback` is not set then the command will work the same both when track changes is on and off.
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     */
    enableCommand(commandName: string, callback?: Function): void;
    /**
     * Temporarily disable track changes to accept or discard a suggestion without intercepting original calls.
     */
    forceDefaultExecution(callback: Function): unknown;
    /**
     * Marks a single-range insertion suggestion on the given `range`.
     *
     * It is expected that given `range` is a range on just-created content and does not intersect with any other suggestion ranges.
     *
     * ```ts
     * trackChangesPlugin.markInsertion( insertionRange );
     * trackChangesPlugin.markInsertion( insertionRange, 'customInsertion' );
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * See {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features guide} to learn more about enabling your feature in the suggestion mode.
     *
     * @param range Range on content which got inserted.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. If not set,
     * suggestion will be a generic insertion suggestion. Only suggestions with the same sub type will be joined.
     * @param attributes Custom suggestion attributes.
     * @returns Suggestion created or expanded as a result of execution of this
     * method. Returns `null` if given `range` was collapsed (so no suggestion was created or expanded).
     */
    markInsertion(range: Range, subType?: string | null, attributes?: Record<string, unknown>): Suggestion | null;
    /**
     * Marks a multi-range insertion suggestion spanning over given `ranges`.
     *
     * It is expected that given `ranges` are ranges on just-created content and do not intersect with any other suggestion ranges.
     *
     * Each range of a multi-range insertion suggestion should contain exactly one element and should not be created on a text content.
     *
     * ```ts
     * trackChangesPlugin.markMultiRangeInsertion( insertionRanges );
     * trackChangesPlugin.markMultiRangeInsertion( insertionRanges, 'customInsertion' );
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     *
     * @param ranges Ranges which got inserted.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. Only suggestions
     * with the same sub type will be joined.
     * @param attributes Custom suggestion attributes.
     * @returns {module:track-changes/suggestion~Suggestion} Suggestion created or expanded as a result of execution of this method.
     */
    markMultiRangeInsertion(ranges: Array<Range>, subType?: string, attributes?: Record<string, unknown>): Suggestion;
    /**
     * Marks an inline format suggestion on the given `range`.
     *
     * This type of format suggestion is suitable for formatting (attribute) changes on inline elements and text.
     * Changes like adding bold or setting a link use this type of format suggestion.
     *
     * Inline format suggestions are directly coupled with editor commands and represent a command execution on given `range`.
     *
     * ```ts
     * trackChangesPlugin.markInlineFormat( formattedRange, {
     *		commandName: 'bold',
     *		commandParams: [ { forceValue: true } ]
     * } );
     *
     * trackChangesPlugin.markInlineFormat( formattedRange, formatData, 'customSubType' );
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * When a format suggestion is accepted the command is executed based on parameters passed in `formatData`.
     *
     * If an inline format suggestion is marked inside the local user's insertion suggestion, the change is applied directly
     * and no suggestion is created. This supports partial intersections with insertion suggestions.
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     *
     * @param range Range on which the change happened.
     * @param formatData Command parameters.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. If not set
     * (which is the default and recommended use) the sub type value is a string hash generated from `formatData`. This guarantees that
     * all inline format suggestions that perform the same changes have the same sub type (and can be properly handled).
     * @param attributes Custom suggestion attributes.
     */
    markInlineFormat(range: Range, formatData: FormatData, subType?: string | null, attributes?: Record<string, unknown>): null;
    /**
     * Marks a block format suggestion on the given `range`.
     *
     * Block format suggestions are directly coupled with editor commands and represent a command execution on the given range or element.
     *
     * This type of format suggestion is suitable for formatting (attribute) changes on block elements.
     * Changes like resizing image, applying block quote or changing header type use this type of format suggestion.
     *
     * Pass element if the suggestion should be marked exactly on that element. This is suitable if the command modifies exactly given
     * element (for example, changes an attribute of that element). If such element is split, an additional suggestion is
     * created for the new element:
     *
     * 		[<paragraph>Foobar]</paragraph>  -->  [<paragraph>Foo]</paragraph>[<paragraph>bar]</paragraph>
     *
     * Pass range for suggestions representing commands that can be executed on multiple blocks at once. This is suitable for commands
     * which modifies all the block elements found in given range (those commands usually operate on selection ranges). This creates
     * only one suggestion for the whole range and do not create additional suggestions if blocks in the range are split:
     *
     *		[<paragraph>Foobar]</paragraph>  -->  [<paragraph>Foo</paragraph><paragraph>Bar]</paragraph>
     *
     * Example of marking block format suggestion on an element:
     *
     * ```ts
     * trackChangesPlugin.markBlockFormat( paragraphElement, {
     *		commandName: 'heading',
     *		commandParams: [ { value: 'heading1' } ],
     *		formatGroupId: 'blockName'
     *	} );
     * ```
     *
     * Example of marking block format suggestion on a range:
     *
     * ```ts
     * plugin.markBlockFormat( selectionRange, {
     *		commandName: 'blockQuote',
     *		commandParams: [ { forceValue: true } ]
     * } );
     * ```
     *
     * If you pass a range, it should start before the first element to change and end:
     *
     * * for blocks (like paragraph, list item, heading, etc.): at the end of the last element to change,
     * * for objects (like image, table, media embed, etc.): after the last element to change.
     *
     * ```xml
     * [<paragraph>Foo</paragraph><paragraph>Bar]</paragraph><paragraph>Xyz</paragraph>
     * [<paragraph>Foo</paragraph><imageBlock src="foo.jpg"></imageBlock>]<paragraph>Xyz</paragraph>
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * When a format suggestion is accepted the command is executed based on parameters passed in `formatData`.
     *
     * If a block format suggestion is marked inside the local user's insertion suggestion, the change is applied directly
     * and no suggestion is created. Note that this does not support partial intersections with insertion suggestions
     * (as opposed to inline format suggestions).
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     *
     * @param elementOrRange Element or range on which the change happened.
     * @param formatData Command parameters and additional suggestion parameters.
     * @param affectedElements Elements (other than `elementOrRange`) that are
     * also affected by the command execution. This parameter is used when the effect of the command execution is larger than
     * `elementOrRange`. It is used when determining whether the change should be applied directly or if the suggestion should be created.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. If not set
     * (which is the default and recommended use) the sub type value is a string hash generated from `formatData`. This guarantees that
     * all block format suggestions that perform the same changes have the same sub types (and can be properly handled).
     * @param attributes Custom suggestion attributes.
     */
    markBlockFormat(elementOrRange: Element | Range, formatData: FormatData, affectedElements?: Array<Element>, subType?: string | null, attributes?: Record<string, unknown>): Suggestion | null;
    /**
     * Marks a multi-range block format suggestion on given `elements`.
     *
     * See {@link module:track-changes/trackchangesediting~TrackChangesEditing#markBlockFormat `TrackChangesEditing#markBlockFormat()`}
     * to learn more about block format suggestions. Note that this method can be used only on elements (not on ranges).
     *
     * This method is useful for creating a format suggestion on multiple elements which are not siblings, so one range cannot be used.
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * When a format suggestion is accepted the command is executed based on parameters passed in `formatData`.
     *
     * If a block format suggestion is marked inside the local user's insertion suggestion, the change is applied directly
     * and no suggestion is created. Note that this does not support partial intersections with insertion suggestions
     * (as opposed to inline format suggestions).
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     *
     * @param elementsOrRanges Elements or ranges
     * on which the change happened.
     * @param formatData Command parameters and additional suggestion parameters.
     * @param affectedElements Elements (other than `elementOrRange`) that are
     * also affected by the command execution. This parameter is used when the effect of the command execution is larger than
     * `elementOrRange`. It is used when determining whether the change should be applied directly or if the suggestion should be created.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. If not set
     * (which is the default and recommended use) the sub type value is a string hash generated from `formatData`. This guarantees that
     * all block format suggestions that perform the same changes have the same sub types (and can be properly handled).
     * @param attributes Custom suggestion attributes.
     */
    markMultiRangeBlockFormat(elementsOrRanges: Array<Element> | Array<Range>, formatData: FormatData, affectedElements?: Array<Element>, subType?: string | null, attributes?: Record<string, unknown>): Suggestion | null;
    /**
     * Marks a single-range deletion suggestion on given `range`.
     *
     * If the `range` to mark intersects with or contains insertion suggestions created by the local user,
     * those suggestions may be removed in a part or in the whole together with their content.
     *
     * ```ts
     * trackChangesPlugin.markDeletion( deletedRange );
     * trackChangesPlugin.markDeletion( deletedRange, 'customDeletion' );
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * See {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features guide} to learn more about enabling your feature in the suggestion mode.
     *
     * @param range Range which should be marked as deletion suggestion.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set. If not set,
     * suggestion will be a generic insertion suggestion. Only suggestions with the same sub type will be joined.
     * @param attributes Custom suggestion attributes.
     * @returns Suggestion created or expanded as a result of execution of this
     * method. Returns `null` if given `range` was collapsed or the deletion was in insertion (so no suggestion was created or expanded).
     */
    markDeletion(range: Range, subType?: string | null, attributes?: Record<string, unknown>): Suggestion | null;
    /**
     * Marks a multi-range deletion suggestion spanning over given `ranges`.
     *
     * Each range of a multi-range deletion suggestion should contain exactly one element and should not be created on a text content.
     *
     * If the `ranges` to mark contain or are contained in insertion suggestions created by the local user, those
     * insertion suggestions may be removed together with their content.
     *
     * ```ts
     * trackChangesPlugin.markMultiRangeDeletion( deletedRanges );
     * trackChangesPlugin.markMultiRangeDeletion( deletedRanges, 'customDeletion' );
     * ```
     *
     * This method should be used in `callback()` in
     * {@link module:track-changes/trackchangesediting~TrackChangesEditing#enableCommand `TrackChangesEditing#enableCommand`}
     * to inform the track changes plugin about a suggestion that happened.
     *
     * Always call this method inside `model.change()` or `model.enqueueChange()` block to ensure that all operations performed by
     * this method are bound with one undo step.
     *
     * See the {@glink features/collaboration/track-changes/track-changes-custom-features Integrating track changes with custom
     * features} guide to learn more about enabling your feature in the suggestion mode.
     *
     * @param ranges Ranges which should be marked as deletion suggestion.
     * @param subType Suggestion {@link module:track-changes/suggestion~Suggestion#subType} to set.
     * Only suggestions with the same sub type will be joined.
     * @param attributes Custom suggestion attributes.
     * @returns Suggestion created or expanded as a result of execution of this method.
     */
    markMultiRangeDeletion(ranges: Array<Range>, subType?: string, attributes?: Record<string, unknown>): Suggestion | null;
}
/**
 * Command parameters and additional suggestion parameters. Passed value is also saved in
 * {@link module:track-changes/suggestion~Suggestion#data `Suggestion#data`} property.
 */
export type FormatData = {
    /**
     * Name of the command to execute when the suggestion is accepted.
     */
    commandName: string;
    /**
     * Parameters with which the command should be executed.
     */
    commandParams: Array<any>;
    /**
     * Additional grouping parameter for suggestions. If a suggestion
     * would be set on an element which already has a different suggestion with the same `formatGroupId`, the new suggestion will overwrite
     * the old one (the old one will be removed). Defaults to `commandName` parameter, so different suggestions of the same command
     * overwrite each other. Using this parameter you might expand this behavior so that multiple commands overwrite each other.
     */
    formatGroupId?: string;
    /**
     * True when format suggestion uses ranges.
     */
    multipleBlocks?: boolean;
    [i: string]: unknown;
};
