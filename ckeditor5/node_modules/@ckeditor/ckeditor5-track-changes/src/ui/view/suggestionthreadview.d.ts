/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
import { default as BaseSuggestionThreadView, type SuggestionThreadConfig } from './basesuggestionthreadview';
import { ButtonView, type TemplateDefinition } from 'ckeditor5/src/ui';
import { UserView, type User } from 'ckeditor5-collaboration/src/collaboration-core';
import type { Locale } from 'ckeditor5/src/utils';
import type Suggestion from '../../suggestion';
/**
 * The default view for a suggestion thread.
 *
 * This view can be replaced by other view by overwriting the
 * {@link module:track-changes/trackchanges~TrackChangesConfig#SuggestionThreadView} configuration.
 */
export default class SuggestionThreadView extends BaseSuggestionThreadView {
    /**
     * The suggestion thread view type.
     *
     * This value is not equal to the suggestion (model) type. It is evaluated based on the type of the first suggestion for
     * the suggestion thread view template purposes.
     *
     * @observable
     */
    type: 'format' | 'replace' | 'deletion' | 'insertion' | '';
    /**
     * A suggestion description explaining what has been changed. To be presented to the user.
     *
     * @observable
     */
    description: string;
    /**
     * A user view for the suggestion author.
     */
    userView: UserView;
    /**
     * A button view for the button that accepts the suggestion.
     */
    acceptButton: ButtonView | null;
    /**
     * A button view for the button that discards the suggestion.
     */
    discardButton: ButtonView | null;
    constructor(locale: Locale, model: Suggestion, localUser: User, config: SuggestionThreadConfig);
    /**
     * Returns a template definition that will be passed to {@link module:ui/view~View#setTemplate}.
     *
     * Overwrite this method if you want to set a custom template for the suggestion thread view.
     *
     * The template looks as follows:
     *
     * ```ts
     * {
     *		tag: 'div',
     *		attributes: {
     *			class: [
     *				'ck-suggestion-wrapper',
     *				bind.if( 'isActive', 'ck-suggestion-wrapper--active' ),
     *				bind.to( 'type', value => `ck-suggestion-${ value }` ),
     *				this._config.disableComments && 'ck-suggestion--disabled-comments'
     *			],
     *			'data-suggestion-id': this._model.id,
     *			'data-thread-id': this._model.commentThread.id,
     *			'data-author-id': this._model.author.id,
     *			// Needed for managing focus after adding a new comment.
     *			tabindex: -1
     *		},
     *		children: [
     *			{
     *				tag: 'div',
     *
     *				attributes: {
     *					class: [
     *						'ck-suggestion',
     *						'ck-annotation'
     *					]
     *				},
     *
     *				children: [
     *					this.userView,
     *					{
     *						tag: 'div',
     *
     *						attributes: {
     *							class: [ 'ck-suggestion__main', 'ck-annotation__main' ]
     *						},
     *
     *						children: [
     *							{
     *								tag: 'div',
     *
     *								attributes: {
     *									class: [ 'ck-suggestion__info', 'ck-annotation__info' ]
     *								},
     *
     *								children: [
     *									{
     *										tag: 'span',
     *
     *										children: [
     *											{
     *												text: this.userView.name
     *											}
     *										],
     *
     *										attributes: {
     *											class: [ 'ck-suggestion__info-name', 'ck-annotation__info-name' ]
     *										}
     *									},
     *									{
     *										tag: 'time',
     *
     *										attributes: {
     *											datetime: bind.to( 'authoredAt' ),
     *											class: [ 'ck-comment__info-time', 'ck-annotation__info-time' ]
     *										},
     *
     *										children: [
     *											{
     *												text: bind.to( 'authoredAt', value => this._config.formatDateTime( value ) )
     *											}
     *										]
     *									}
     *								]
     *							},
     *							{
     *								tag: 'div',
     *
     *								attributes: {
     *									class: [
     *										'ck-suggestion__actions',
     *										'ck-annotation__actions'
     *									]
     *								},
     *
     *								children: [
     *									this.acceptButton,
     *									this.discardButton
     *								]
     *							},
     *							{
     *								tag: 'div',
     *
     *								attributes: {
     *									class: [ 'ck-annotation__content-wrapper' ]
     *								}
     *							},
     *							{
     *								tag: 'div',
     *
     *								attributes: {
     *									class: [ 'ck-comment__external' ]
     *								},
     *
     *								children: [ {
     *									text: getTranslation( this.locale, 'EXTERNAL_SUGGESTION' )
     * 								} ]
     * 							}
     *						]
     *					}
     *				]
     *			},
     *			this.commentsListView,
     *			this.commentThreadInputView
     *		]
     * }
     * ```
     */
    getTemplate(): TemplateDefinition;
    /**
     * @inheritDoc
     */
    render(): void;
    /**
     * Gets the translated note which indicates that the suggestion comes from an external source.
     */
    getExternalSuggestionNote(): string;
    /**
     * Gets the translated notification text which indicates that the author name comes from an external source.
     */
    getUserViewNotificationText(): string | null;
}
