/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/**
 * @module export-word/exportword
 * @publicApi
 */
import { Plugin, type Editor } from 'ckeditor5/src/core';
import { Notification } from 'ckeditor5/src/ui';
import type { InitializedToken, TokenUrl } from '@ckeditor/ckeditor5-cloud-services';
import '../theme/exportword.css';
/**
 * The export to Word feature.
 *
 * It allows you to generate a Word file directly from the editor content.
 *
 * For a detailed overview, check the {@glink features/converters/export-word export to Word} feature documentation.
 */
export default class ExportWord extends Plugin {
    /**
     * @inheritDoc
     */
    static get pluginName(): "ExportWord";
    /**
     * @inheritDoc
     */
    static get requires(): readonly ["CloudServices", typeof Notification];
    /**
     * @inheritDoc
     */
    init(): void;
}
/**
 * The configuration of the export to Word feature. It is used by the Word export features from
 * the `@ckeditor/ckeditor5-export-word` package.
 *
 * ```ts
 * ClassicEditor
 * 	.create( editorElement, {
 * 		exportWord: ... // Export to Word feature options.
 * 	} )
 * 	.then( ... )
 * 	.catch( ... );
 * ```
 *
 * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.
 */
export interface ExportWordConfig {
    /**
     * Paths to the `.css` files containing additional styling for the editor's content (**the order of provided items matters**).
     *
     * ```ts
     * const exportWordConfig = {
     * 	stylesheets: [ './path/to/custom-style.css' ]
     * }
     * ```
     *
     * **NOTE:** If `stylesheets` are not provided, the plugin will sent only
     * {@glink installation/advanced/content-styles#the-full-list-of-content-styles the default editor content styles} to the converter.
     *
     * **Default editor's content styles**:
     * {@glink installation/advanced/content-styles#the-full-list-of-content-styles The default editor content styles}
     * are applied to the generated Word file thanks to the 'EDITOR_STYLES' token, which is provided to the `stylesheets` by default.
     * If you don't want them to be applied, you have to omit the token:
     *
     * ```ts
     * const exportWordConfig = {
     * 	stylesheets: [ './path/to/custom-editor-styles.css' ]
     * }
     * ```
     *
     * **Custom styling:** For more advanced styling, your configuration should look like this:
     *
     * ```ts
     * const exportWordConfig = {
     * 	stylesheets: [
     * 		'EDITOR_STYLES',
     * 		'./path/to/custom-styles.css'
     * 	]
     * }
     * ```
     *
     * @default `[ 'EDITOR_STYLES' ]`
     */
    stylesheets?: Array<string>;
    /**
     * The name of the generated Word file.
     *
     * ```ts
     * // Static file name.
     * const exportWordConfig = {
     * 	fileName: 'my-document.docx'
     * }
     *
     *
     * // Dynamic file name.
     * const exportWordConfig = {
     * 	fileName: () => {
     * 		const articleTitle = document.querySelector( '#title' );
     *
     * 		return `${ articleTitle.value }.docx`;
     * 	}
     * }
     * ```
     *
     * **NOTE:** The file name must contain the `.docx` extension.
     * Otherwise your operating system or device may have trouble identifying the file type.
     *
     * @default 'document.docx'
     */
    fileName?: string | (() => string);
    /**
     * A URL to the Docx converter.
     *
     * ```ts
     * const exportWordConfig = {
     * 	converterUrl: 'https://myconverter.com/v1/'
     * }
     * ```
     *
     * **NOTE:** The plugin uses the default HTML to Word converter delivered by CKEditor Cloud Services.
     * You can provide a URL to an on-premises converter instead.
     *
     * @default 'https://docx-converter.cke-cs.com/v1/convert'
     */
    converterUrl?: string;
    /**
     * The CKEditor Cloud Services HTML to DOCX Converter [configuration options](https://docx-converter.cke-cs.com/docs#section/Options).
     *
     * **NOTE:** Configuring the plugin is not mandatory.
     *
     * ```ts
     * const exportWordConfig = {
     * 	converterOptions: {
     * 		...
     * 	}
     * }
     * ```
     *
     * @default `{
     * 	format: 'A4',
     * 	margin_top: '1in',
     * 	margin_bottom: '1in',
     * 	margin_right: '1in',
     * 	margin_left: '1in',
     * 	header: undefined,
     * 	footer: undefined,
     * 	comments: undefined,
     * 	suggestions: undefined,
     * 	orientation: 'portrait',
     * 	auto_pagination: true,
     * 	base_url: undefined,
     * 	timezone: 'UTC'
     * }`
     */
    converterOptions?: ExportWordConverterOptions;
    /**
     * A function to gather the HTML to be converted to Word.
     *
     * **NOTE:** This option may be useful when the editor does not have a `getData()` method,
     * or if the HTML to be converted should be different than the edited one.
     *
     * ```ts
     * const exportWordConfig = {
     * 	dataCallback: ( editor ) => {
     * 		return `
     * 			<header id="header">${ editor.data.get( { rootName: 'header' } ) }</header>
     * 			<div id="content">${ editor.data.get( { rootName: 'content' } ) }</div>
     * 		`;
     * 	}
     * }
     * ```
     *
     * @default `( editor ) => editor.getData( { pagination: true } )
     *
     * If using the {@glink features/pagination/pagination pagination} feature, the `pagination:true` option inserts additional markers into
     * editor's data. Thanks to that, the Docx converter creates a Word document similar to what is displayed in the editor.
     */
    dataCallback?: (editor: Editor) => string;
    /**
     * A token URL or a token request function. This field is optional and should be used only when a different `tokenUrl` is required for
     * the export to Word feature.
     *
     * **Note:** The token can be disabled with the `false` value provided.
     *
     * See: {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl}
     */
    tokenUrl?: TokenUrl | false;
    /**
     * The authentication token.
     *
     * See: {@link module:cloud-services/cloudservices~CloudServices#token}
     */
    token?: InitializedToken;
}
export type ExportWordConverterOptions = {
    format?: ExportWordConverterFormatOption;
    margin_top?: string;
    margin_bottom?: string;
    margin_right?: string;
    margin_left?: string;
    header?: ExportWordConverterHeaderFooterOption;
    footer?: ExportWordConverterHeaderFooterOption;
    comments?: ExportWordConverterCommentsOption;
    suggestions?: ExportWordConverterSuggestionsOption;
    orientation?: ExportWordConverterOrientationOption;
    auto_pagination?: boolean;
    base_url?: string;
    timezone?: string;
};
export type ExportWordConverterFormatOption = 'Letter' | 'Legal' | 'Tabloid' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A5' | 'A6' | 'B4' | 'B5';
export type ExportWordConverterOrientationOption = 'portrait' | 'landscape';
export type ExportWordConverterHeaderFooterOption = Array<{
    html?: string;
    css?: string;
    type?: 'default' | 'even' | 'odd' | 'first';
}>;
export type ExportWordConverterCommentsOption = {
    [id: string]: Array<{
        author: string;
        created: Date;
        content?: string;
        is_resolved: boolean;
    }>;
};
export type ExportWordConverterSuggestionsOption = {
    [id: string]: {
        author: string;
        created: Date | null;
    };
};
