/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/**
 * @module template/ui/templateformview
 */
import { FocusTracker, KeystrokeHandler, type Locale } from 'ckeditor5/src/utils';
import { View, ListView, type ViewCollection } from 'ckeditor5/src/ui';
import TemplateFormInfoView from './templateforminfoview';
import TemplateFormSearchFieldView from './templateformsearchfieldview';
import { type TemplateDefinition } from '../template';
/**
 * A class representing the panel with a list of available templates.
 *
 * @extends module:ui/view~View
 */
export default class TemplateFormView extends View {
    /**
     * Tracks information about the DOM focus in the form.
     *
     * @readonly
     */
    focusTracker: FocusTracker;
    /**
     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.
     *
     * @readonly
     */
    keystrokes: KeystrokeHandler;
    /**
     * The definition of the template that the button will apply when executed.
     *
     * @readonly
     */
    templatesDefinitions: Array<TemplateDefinition>;
    /**
     * The templates list view.
     */
    templateListView: TemplateListView;
    /**
     * A search text field allowing to filter the {@link #templateListView list of templates}.
     */
    searchFieldView: TemplateFormSearchFieldView;
    /**
     * A view displaying information text when the feature is not configured or no templates were
     * found for the particular phrase.
     */
    infoView: TemplateFormInfoView;
    /**
     * The collection of the child views inside of the list item {@link #element}.
     *
     * @readonly
     */
    children: ViewCollection;
    /**
     * Creates an instance of the {@link module:template/ui/templateformview~TemplateFormView} class.
     *
     * @param locale The localization services instance.
     * @param templatesDefinitions Definitions of the templates.
     */
    constructor(locale: Locale, templatesDefinitions: Array<TemplateDefinition>);
    /**
     * @inheritDoc
     */
    render(): void;
    /**
     * Focuses the {@link #searchFieldView} if some templates were configured.
     */
    focus(): void;
    /**
     * Resets the form to its initial state (no search query, all available templates are listed).
     */
    reset(): void;
}
/**
 * The template list view class with filtering and sorting.
 *
 * @private
 */
declare class TemplateListView extends ListView {
    /**
     * Filters the list of templates according to a specified regular expression. The filtered list is sorted so that items that
     * match the regular expression in their titles are displayed first.
     *
     * Matching items highlight the regular expression (query) in their titles and/or descriptions.
     *
     * See {@link #unfilter}.
     *
     * **Note**: The `Collection` (also `ViewCollection`) class does not provide sorting functionality. Thus, the functionality
     * implemented in this method is **extremely inefficient** because it clones the entire collection, sorts it as an array,
     * then purges the original collection and sets it from scratch with the sorted array. Purging and resetting the
     * collection triggers an avalanche of `add` and `remove` events synchronously handled by the `Template` (UI bindings)
     * and **rendered in the DOM**. As long as sorting takes shorter than rendering of the DOM this should not be noticeable
     * but the moment it does not, the UI will start glitching. A proper `Collection#sort` is needed to work around
     * this overhead (see https://github.com/ckeditor/ckeditor5/issues/2065).
     *
     * @param regExp A regular expression used to match the list title and description.
     * @returns True if some list items matched the regular expression. False otherwise.
     */
    filter(regExp: RegExp): boolean;
    /**
     * Resets the filtering of the list of templates. Removes highlighting in titles and descriptions
     * of list items and restores the default order of the list (as in editor configuration).
     *
     * See {@link #filter}.
     */
    unfilter(): void;
}
export {};
