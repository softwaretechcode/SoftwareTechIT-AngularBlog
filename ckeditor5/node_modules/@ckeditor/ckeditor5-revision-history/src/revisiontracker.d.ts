/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/**
 * @module revision-history/revisiontracker
 * @publicApi
 */
import { Users } from 'ckeditor5-collaboration/src/collaboration-core';
import { Plugin, PendingActions, type Editor } from 'ckeditor5/src/core';
import RevisionsRepository from './revisionsrepository';
import type { RevisionHistoryAdapter } from './revisionhistoryadapter';
import type { default as Revision, RevisionData } from './revision';
/**
 * Creates and updates revisions based on changes of the editor content.
 *
 * There are always at least two revisions available for the document: the initial revision and the current revision.
 * If those revisions have not been created for the document yet, they are created when the editor data is loaded.
 *
 * The initial revision contains the initial document data from when the document was loaded for the first time.
 *
 * The current revision contains all the unsaved document changes, that is changes which have not been saved yet as a specific revision.
 * The current revision is always available and it is always the "top" revision (most recent).
 */
export default class RevisionTracker extends Plugin {
    /**
     * An adapter object that should communicate with the data source to fetch or save the revisions data.
     *
     * This property is also set through {@link module:revision-history/revisionhistory~RevisionHistory#adapter}.
     */
    adapter: RevisionHistoryAdapter | null;
    repository?: RevisionsRepository;
    static get pluginName(): "RevisionTracker";
    static get requires(): readonly [typeof Users, typeof RevisionsRepository, typeof PendingActions];
    constructor(editor: Editor);
    /**
     * @inheritDoc
     */
    init(): void;
    afterInit(): Promise<void>;
    /**
     * Adds the new document changes to the current revision.
     *
     * This method should be called before document data and revision data is saved (for example, in the autosave callback).
     *
     * @returns Promise that is resolved after the revision is updated locally (the promise does not wait for the adapter update).
     */
    update(): Promise<void>;
    private _loadState;
    /**
     * Creates and saves a new revision.
     *
     * ```ts
     * // Saves all the unsaved changes as a revision without a name.
     * const myRevision = await revisionTracker.saveRevision();
     *
     * // Saves all the unsaved changes as a revision named 'My revision'.
     * const myRevision = await revisionTracker.saveRevision( { name: 'My revision' } );
     *
     * // Saves a revision named 'My revision'.
     * // It will include document data with all the changes up to document version `30`.
     * // The revision will be on "top" of the closest revision with a lower document version.
     * // The revision diff will include all the changes since the previous revision up to document version `30`.
     * const myRevision = await revisionTracker.saveRevision( { name: 'My revision' }, 30 );
     * ```
     *
     * A new revision can be created in the middle of the revision history. In such case, already existing revisions will be
     * appropriately updated.
     *
     * @param revisionData Revision data to set on the created revision.
     * @param version {@link module:engine/model/document~Document#version Document version} on which the revision is saved.
     * If not set, the revision will be saved for the current (most recent) document state.
     * @returns Promise that resolves with the created revision after it is saved locally (the promise does not wait for the
     * adapter update).
     */
    saveRevision(revisionData?: RevisionData, version?: number | null): Promise<Revision>;
    /**
     * Creates a revision basing on given revision data and adds it to the revision tracker and revision repository.
     */
    addRevisionData(revisionData: RevisionData): Revision;
}
